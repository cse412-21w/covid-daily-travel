{"version":3,"sources":["vegaDemo.js"],"names":["options","config","init","view","tooltip","vegaTooltip","Handler","call","renderer","vl","register","vega","vegaLite","d3","csv","travel_data","then","drawBarVegaLite","click","selectMulti","encodings","brush","selectInterval","scale","domain","range","trip_2020","markBar","opacity","select","data","transform","filter","encode","y","fieldN","axis","labelAngle","sort","title","x","average","color","value","if","width","trip_Point","markPoint","filled","month","trip_Line","markLine","vconcat","layer","autosize","type","contains","resolve","render","viewElement","document","getElementById","appendChild"],"mappings":"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","file":"vegaDemo.ea1a58a6.js","sourceRoot":"../src","sourcesContent":["import travel_data from '../static/trips_categorize_24@3.csv'    // import dataset\n\"use strict\";     // the code should be executed in \"strict mode\".\n                  // With strict mode, you can not, for example, use undeclared variables\n\n/*var sunshineArray = [];   // used to store data later\nvar citySet = [];\n*/\nconst options = {\n  config: {\n    // Vega-Lite default configuration\n  },\n  init: (view) => {\n    // initialize tooltip handler\n    view.tooltip(new vegaTooltip.Handler().call);\n  },\n  view: {\n    // view constructor options\n    // remove the loader if you don't want to default to vega-datasets!\n    //   loader: vega.loader({\n    //     baseURL: \"\",\n    //   }),\n    renderer: \"canvas\",\n  },\n};\n\nvl.register(vega, vegaLite, options);\n\n// Again, We use d3.csv() to process data\nd3.csv(travel_data).then(drawBarVegaLite); /*{\n  data.forEach(function(d){\n    sunshineArray.push(d);\n    if (!citySet.includes(d.city)) {\n      citySet.push(d.city);\n    }\n  })\n  drawBarVegaLite();\n})*/\n\nfunction drawBarVegaLite() {\n  // var sunshine = add_data(vl, sunshine.csv, format_type = NULL);\n  // your visualization goes here\n  \n    const click = vl.selectMulti().encodings('color');\n    const brush = vl.selectInterval().encodings('x');\n      \n    const scale = {\n        domain: ['Walkable Trips', 'Commute Trips', 'Outdoor Trips', 'Traveling Trips'],\n        range: ['#e7ba52', '#a7a7a7', '#aec7e8', '#1f77b4']\n      };\n    \n    const trip_2020 = vl.markBar({opacity: 0.8})\n                       .select(click)\n                       .data(travel_data)\n                       .transform(vl.filter(brush))\n                       .encode(\n                         vl.y().fieldN('dist').axis({ labelAngle: 0}).sort(null).title('trip distance'),\n                         vl.x().average('value').title('The Number of Trips'),\n                         vl.color().value('grey').if(click, vl.color().fieldN('dist'))\n                       )\n                       .title('Distribution of the Avg.Trips in United States in 2020')\n                       .width(1200)\n    \n    const trip_Point =vl.markPoint({filled: true})\n                   .data(travel_data)\n                   .encode(\n                     vl.x().month('Date'),\n                     vl.y().average('value').title('The Number of Trips'),\n                     vl.color().value('grey')\n                              .if(brush, vl.color().fieldN('dist')),\n                     vl.opacity().if(click, vl.value(1)).value(0.2)\n                   )\n                   .title('Trips Distance in Each Month')\n                   .select(brush)\n                   .transform(vl.filter(click))\n                   .width(1200)\n    \n    const trip_Line =vl.markLine()\n                   .data(travel_data)\n                   .encode(\n                     vl.x().month('Date'),\n                     vl.y().average('value').title('The Number of Trips'),\n                     vl.color().fieldN('dist'),\n                     vl.opacity().if(click, vl.value(1)).value(0.2))\n    \n    return vl.vconcat( vl.layer(trip_Line, trip_Point), trip_2020)\n                .autosize({type: 'fit-x', contains: 'padding'})\n                .resolve({scale: {y: 'shared'}})\n                .render()\n                .then(viewElement => {\n                  // render returns a promise to a DOM element containing the chart\n                  // viewElement.value contains the Vega View object instance\n                  document.getElementById('view').appendChild(viewElement);\n  });\n}\n  \n"]}