{"version":3,"sources":["Fig_1.js"],"names":["bubbleChart","width","height","centre","x","y","forceStrength","svg","bubbles","labels","nodes","charge","d","Math","pow","radius","simulation","d3","forceSimulation","alpha","force","forceManyBody","strength","forceX","forceY","forceCollide","stop","fillColour","scaleLinear","domain","range","createNodes","rawData","maxSize","max","Confrimed_Case","radiusScale","scaleSqrt","myNodes","map","size","random","chart","selector","select","append","attr","elements","selectAll","data","Province_State","enter","classed","style","text","on","ticked","restart","myBubbleChart","display","csv","Total_Covid_State_2020","then"],"mappings":"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","file":"Fig_1.379a1a32.js","sourceRoot":"..\\src","sourcesContent":["import Total_Covid_State_2020 from '../static/Total_Covid_State_2020.csv'\n\n// bubbleChart creation function; instantiate new bubble chart given a DOM element to display it in and a dataset to visualise\nfunction bubbleChart() {\n  const width = 1100;\n  const height = 650;\n\n  // location to centre the bubbles\n  const centre = { x: width/2, y: height/2 };\n\n  // strength to apply to the position forces\n  const forceStrength = 0.03;\n\n  // these will be set in createNodes and chart functions\n  let svg = null;\n  let bubbles = null;\n  let labels = null;\n  let nodes = [];\n\n  // charge is dependent on size of the bubble, so bigger towards the middle\n  function charge(d) {\n    return Math.pow(d.radius, 2.0)\n  }\n\n  // create a force simulation and add forces to it\n  const simulation = d3.forceSimulation()\n    .alpha(0.04)\n    .force('charge', d3.forceManyBody().strength(charge))\n    // .force('center', d3.forceCenter(centre.x, centre.y))\n    .force('x', d3.forceX().strength(forceStrength).x(centre.x))\n    .force('y', d3.forceY().strength(forceStrength).y(centre.y))\n    .force('collision', d3.forceCollide().radius(d => d.radius + 1));\n\n  // force simulation starts up automatically, which we don't want as there aren't any nodes yet\n  simulation.stop();\n\n  // set up colour scale\n  const fillColour = d3.scaleLinear()\n     .domain([0, 15000000, 30000000, 174400383])\n     .range([\"#0074D9\", \"#7FDBFF\", \"#39CCCC\", \"#3D9970\"]);\n\n  // data manipulation function takes raw data from csv and converts it into an array of node objects\n  // each node will store data and visualisation values to draw a bubble\n  // rawData is expected to be an array of data objects, read in d3.csv\n  // function returns the new node array, with a node for each element in the rawData input\n  function createNodes(rawData) {\n    // use max size in the data as the max in the scale's domain\n    // note we have to ensure that size is a number\n    const maxSize = d3.max(rawData, d => +d.Confrimed_Case);\n\n    // size bubbles based on area\n    const radiusScale = d3.scaleSqrt()\n      .domain([0, maxSize])\n      .range([0, 85])\n\n    // use map() to convert raw data into node data\n    const myNodes = rawData.map(d => ({\n      ...d,\n      radius: radiusScale(+d.Confrimed_Case),\n      size: +d.Confrimed_Case,\n      x: Math.random() * 1000,\n      y: Math.random() * 700\n    }))\n\n    return myNodes;\n  }\n\n  // main entry point to bubble chart, returned by parent closure\n  // prepares rawData for visualisation and adds an svg element to the provided selector and starts the visualisation process\n  let chart = function chart(selector, rawData) {\n    // convert raw data into nodes data\n    nodes = createNodes(rawData);\n\n    // create svg element inside provided selector\n    svg = d3.select(selector)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n\n    // bind nodes data to circle elements\n    const elements = svg.selectAll('.bubble')\n      .data(nodes, d => d.Province_State)\n      .enter()\n      .append('g')\n\n    bubbles = elements\n      .append('circle')\n      .classed('bubble', true)\n      .attr('r', d => d.radius)\n      .attr('fill', d => fillColour(d.Confrimed_Case))\n\n    // labels\n    labels = elements\n      .append('text')\n      .attr('dy', '.3em')\n      .style('text-anchor', 'middle')\n      .style('font-size', d => d.radius/2.8)\n      .text(d => d.Province_State)\n\n    // set simulation's nodes to our newly created nodes array\n    // simulation starts running automatically once nodes are set\n    simulation.nodes(nodes)\n      .on('tick', ticked)\n      .restart();\n  }\n\n  // callback function called after every tick of the force simulation\n  // here we do the actual repositioning of the circles based on current x and y value of their bound node data\n  // x and y values are modified by the force simulation\n  function ticked() {\n    bubbles\n      .attr('cx', d => d.x)\n      .attr('cy', d => d.y)\n\n    labels\n      .attr('x', d => d.x)\n      .attr('y', d => d.y)\n  }\n\n  // return chart function from closure\n  return chart;\n}\n\n// new bubble chart instance\nlet myBubbleChart = bubbleChart();\n\n// function called once promise is resolved and data is loaded from csv\n// calls bubble chart function to display inside #vis div\nfunction display(data) {\n  myBubbleChart('#d3_bubble_chart', data);\n}\n\n// load data\nd3.csv(Total_Covid_State_2020).then(display);\n\n\n\n\n"]}