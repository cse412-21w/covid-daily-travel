{"version":3,"sources":["Fig2_map.js"],"names":["margin","top","bottom","left","right","width","height","svg","d3","select","append","attr","projection","geoAlbersUsa","path","geoPath","color","scaleSequential","interpolateBlues","json","then","us","states","topojson","feature","objects","features","nation","fitSize","data","map","name","properties","value","Math","random","paths","selectAll","join","enter","p","on","raise","d","style","text"],"mappings":"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","file":"Fig2_map.1d8a5d1a.js","sourceRoot":"../src","sourcesContent":["const margin = {\n        top: 100,\n        bottom: 100,\n        left: 10,\n        right: 100,\n      };\nconst width = 800 - margin.left - margin.right;\nconst height = 600 - margin.top - margin.bottom;\n\n      // Creates sources <svg> element and inner g (for margins)\nconst svg = d3\n        .select(\"#d3_interactive_Map\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n      /////////////////////////\nconst projection = d3.geoAlbersUsa();\nconst path = d3.geoPath(projection);\nconst color = d3.scaleSequential(d3.interpolateBlues);\n\nd3.json(\"https://cdn.jsdelivr.net/npm/us-atlas/states-10m.json\").then((us) => {\n        const states = topojson.feature(us, us.objects.states).features;\n        const nation = topojson.feature(us, us.objects.nation).features[0];\n\n        // scale to fit bounds\nprojection.fitSize([width, height], nation);\n\nconst data = states.map((feature) => ({\n          feature: feature,\n          name: feature.properties.name,\n          value: Math.random(), // random value\n        }));\n\nconst paths = svg\n          .attr(\"class\", \"state\")\n          .selectAll(\"path\")\n          .data(data)\n          .join((enter) => {\n            const p = enter.append(\"path\");\n            p.on(\"mouseenter\", function () {\n              // move the SVG element after all other elements to be on the top\n              d3.select(this).raise();\n            });\n            p.append(\"title\");\n            return p;\n          })\n          .attr(\"d\", (d) => path(d.feature))\n          .attr(\"fill\", \"grey\")\n          .style(\"stroke\", \"white\")\n          .style(\"stroke-width\", \"1px\");\n        paths.select(\"title\").text((d) => d.name);\n      });\n\n\n"]}